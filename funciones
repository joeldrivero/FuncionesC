void * buscarMenor(const void * vec, const void * fin, size_t tam, int (*cmp)(const void*, const void*));
void intercambiar(void * e1, void * e2, size_t tam);

void* _ordenarSeleccion(void* vec, int ce, unsigned tam, int cmp(const void*, const void*))

    void *menor;
    void* fin = (char*)vec + (ce - 1) * tam;

    while(vec < fin)
    {
        menor = buscarMenor(vec, fin, tam, cmp);
        if (vec<menor)
        {
            intercambiar(vec, menor, tam);
        }
        vec = (char*)vec + tam;
    }
    return NULL;
}

int _cmpEmpleadoNombre(const void* a, const void* b){
    const tEmpleado *emp1 = (const tEmpleado *)a,
                   *emp2 = (const tEmpleado *)b;

    return _cmp_str(emp1->nomYAp, emp2->nomYAp);
    //return -1;
}

int _cmp_enteros(const void* a, const void* b){
    const int * e1 = (const int *)a;
    return *e1 - *(const int*)b; // si cambio a *(const int*)b - *e1 ,puedo ordenar de forma descendente
    //return -1;
}

int _cmp_str(const void* a, const void* b){

    // <0 si 'a' es menor que 'b'
    // 0 cero 'a' y 'b' son iguales
    // >0 si 'a' es mayor 'b'

    const char *s1 = a;
    const char *s2 = b;

    while (*s1 && (*s1 == *s2)) {
        s1++;
        s2++;
    }

    return *(char*) s1 - *(char*) s2;
    //return -1;
}

char* _mstrstr(const char *s1, const char *s2){

    if (*s2 == '\0') {
        return (char*) s1;
    }

    while (*s1) {
        const char *p1 = s1;
        const char *p2 = s2;

        while (*p1 && *p2 && (*p1 == *p2)) {
            p1++;
            p2++;
        }

        if (*p2 == '\0') {
            return (char*) s1;  // Se encontró la subcadena en la cadena original
        }

        s1++;
    }

    return NULL;
}

void * buscarMenor(const void * vec, const void * fin, size_t tam, int (*cmp)(const void*, const void*))
{
    const void * men = vec;
    vec = (const char*)vec + tam;
    while(vec <= fin)
    {
        if (cmp(vec, men) < 0) // si Cambio a "cmp(vec, men) > 0" puedo ordenar de forma descendente
        {
            men = vec;
        }
        vec = (const char*)vec + tam;
    }
    return (void *) men;
}

void mi_memcpy(void* destino, const void* origen, size_t tam) {
    char* dest = (char*)destino;
    const char* orig = (const char*)origen;

    for (size_t i = 0; i < tam; i++) {
        dest[i] = orig[i];
    }
}

void intercambiar(void * e1, void * e2, size_t tam)
{
    void * aux = malloc(tam);
    if (!aux) return;

    mi_memcpy(aux, e1, tam);
    mi_memcpy(e1, e2, tam);
    mi_memcpy(e2, aux, tam);

    free(aux);
}

#define MAXLINE 100
int esAlfabetico(char c) {
    if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
        return 1;
    }
    return 0;
}

int buscarPosicionLetra(const char* validador, char caracter) {
    int indice = 0;
    while (validador[indice] != '\0') {
        if (validador[indice] == caracter) {
            return indice;
        }
        indice++;
    }
    return -1;
}

void desofuscarPalabra(char* palabra, int longitud) {
    int posicion = 0, posicionNuevaLetra = 0;
    char validador[] = "abcdghijkoqtuv";

    for (int i = 0; i < longitud; i++) {
        if (esAlfabetico(palabra[i])) {
            char letra = palabra[i];
            char reemplazo;

            posicion = buscarPosicionLetra(validador, letra);
            if (posicion != -1) {
                posicionNuevaLetra = i + 1 + posicion;
                if(posicionNuevaLetra < 14){
                    reemplazo = validador[posicionNuevaLetra];
                }else{
                    posicionNuevaLetra = (13 - posicion - i)*-1;
                    reemplazo = validador[posicionNuevaLetra];
                }

            } else {
                reemplazo = letra;
            }

            palabra[i] = reemplazo;
        }
    }
}

int _desofuscarArchivo(const char* nomArchOfus, const char* nomArchDesofus){
    char linea[MAXLINE];

    FILE* pfOfus = fopen(nomArchOfus, "rt");
    FILE* pfDesofus = fopen(nomArchDesofus, "wt");

    if(!pfOfus || !pfDesofus){
        printf("No se pudo abrir el archivo");
        return 1;
    }

    while (fgets(linea, MAXLINE, pfOfus) != NULL) {
        int indice = 0;

        while (linea[indice] != '\0') {
                if(esAlfabetico(linea[indice])){
                    int inicio = indice;
                    while (esAlfabetico(linea[indice])) {
                        indice++;
                    }
                    int longitud = indice - inicio;

                    char palabra[MAXLINE];
                    int i;
                    for (i = 0; i < longitud; i++) {
                        palabra[i] = linea[inicio + i];
                    }
                    palabra[longitud] = '\0';
                    desofuscarPalabra(palabra, longitud);

                    fputs(palabra, pfDesofus);

                }else {
                    fputc(linea[indice], pfDesofus);
                    indice++;
                }
        }
    }

    return 0;
}

int esCaracterSeparador(char c) {
    // Define los caracteres que se consideran separadores de palabras
    return c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '.' || c == ',' || c == ':' || c == ';' || c == '-' || c == '!' || c == '?' || c == '"' || c == '\'' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}';
}

int _contarPalabras(const char* nomArc, char* palMasLarga, int* cantVeces){

    FILE* archivo = fopen(nomArc, "r");
    if (archivo == NULL) {
        printf("No se pudo abrir el archivo.\n");
        return -1;
    }

    char palabra[128];
    int totalPalabras = 0;
    int longitudPalabraMasLarga = 0;
    int aparicionesPalabraMasLarga = 0;
    int longitudPalabra = 0;
    int c;

    while ((c = fgetc(archivo)) != EOF) {

        if (!esCaracterSeparador(c)) {
            // Construir la palabra caracter a caracter
            palabra[longitudPalabra] = c;
            longitudPalabra++;

            // Verificar si se supera la longitud de la palabra más larga encontrada hasta ahora
            if (longitudPalabra > longitudPalabraMasLarga) {
                longitudPalabraMasLarga = longitudPalabra;
                strcpy(palMasLarga, palabra);
                aparicionesPalabraMasLarga = 1;
            } else if (longitudPalabra == longitudPalabraMasLarga && strcmp(palabra, palMasLarga) == 0) {
                aparicionesPalabraMasLarga++;
            }
        } else {
            if (longitudPalabra > 0) {
                totalPalabras++;
            }
            longitudPalabra = 0;
        }
    }

    if (longitudPalabra > 0) {
        totalPalabras++;
    }

    fclose(archivo);

    *cantVeces = aparicionesPalabraMasLarga;
    return totalPalabras;

    return 0;
}


int _esMatrizCampeonatoValida(int mat[][MAX_COL], int lado){
    int result1[] = {4,0,3,2,1};
    int result2[] = {1,6,3,2,4};
    int valido = 0;

    for(int i = 0; i < lado; i++){
        for(int j = i + 1; j < lado; j++){
            for(int k = 0; k < 5; k++){
                if(mat[i][j] == result1[k] && mat[j][i] == result2[k]){
                    valido = 1;
                    break;
                }else{
                    valido = 0;
                }
            }
            if(!valido){
                return 0;
            }

        }
    }

    if(valido){
        return 1;
    }
    return 0;
}


int esLetra(char c) {
    return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) && c != '-' && c != ':';
}

int compararPalabras(const char* palabra1, const char* palabra2) {
    while(*palabra1 && (*palabra1 == *palabra2)){
        *palabra1++;
        *palabra2++;
    }
    return (int)(*palabra1-*palabra2);
}

void copiarPalabra(char* destino, const char* origen) {
    int i = 0;
    while (origen[i] != '\0') {
        destino[i] = origen[i];
        i++;
    }
    destino[i] = '\0';
}

int _contarPalabras(const char* nomArc, char* palMasLarga, int* cantVeces)
{
    FILE* file = fopen(nomArc, "r");
    if (file == NULL) {
        printf("No se pudo abrir el archivo.\n");
        return 0;
    }

    int totalPalabras = 0;
    int maxLongitud = 0;
    int resultado = 0;
    char palabraActual[128];
    char palabraMaxima[128];

    int c;
    int longitud = 0;
    int inicioPalabra = -1;

    while ((c = fgetc(file)) != EOF) {
        if (esLetra(c)) {
            if (inicioPalabra == -1)
                inicioPalabra = longitud;

            palabraActual[longitud] = c;
            longitud++;
        } else {
            if (inicioPalabra != -1) {
                if (longitud > 1 || (longitud == 1 && palabraActual[inicioPalabra] != ':')) {
                    palabraActual[longitud] = '\0';
                    if (longitud > maxLongitud) {
                        maxLongitud = longitud;
                        copiarPalabra(palabraMaxima, palabraActual);
                        *cantVeces = 1;
                    } else if (longitud == maxLongitud) {
                        if (compararPalabras(palabraActual, palabraMaxima) == 0) {
                            (*cantVeces)++;
                        }
                    }
                    totalPalabras++;
                }
                inicioPalabra = -1;
                longitud = 0;
            }
        }
    }

    fclose(file);
    copiarPalabra(palMasLarga, palabraMaxima);
    return totalPalabras;
}


void* _bbinaria(const void* clave, const void* vec, size_t ce, size_t tam, int cmp(const void*, const void*)) {

    const char* inicio = (const char*)vec;
    const char* fin = inicio + (ce - 1) * tam;

    while (inicio <= fin) {
        const char* medio = inicio + ((fin - inicio) / tam / 2) * tam;
        int comparacion = cmp(clave, medio);

        if (comparacion == 0) {
            return (void*)medio;
        } else if (comparacion < 0) {
            fin = medio - tam;
        } else {
            inicio = medio + tam;
        }
    }


    // El elemento no fue encontrado
    return NULL;
}


int _sumTrianDerEntreDiag(int mat[][MAX_COL], int filas)
{
    int i,j;
    int suma = 0;
    for(j=MAX_COL-1; j>(MAX_COL/2); j--){
        for(i=filas-j;i<j;i++){
            suma += mat[i][j];
        }
    }
    return 0;
}

int _sumTrianInfEntreDiag(int mat[][MAX_COL], int filas)
{ int i,j;
    int suma = 0;

    for(i=1;i<filas;i++){
        for(j=6-i;j<MAX_COL;j++){
            suma += mat[i][j];
        }
    }
    return suma;
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../Fecha/Fecha.h"
#include "../SolucionParcialPlazosFijosTopicos/SolucionParcialPlazosFijos.h"

void procesarPF_ALU(FILE* archivoCuentas, PlazoFijo* vectorPlazoFijo, int ce, Fecha* fechaProceso);
PlazoFijo* cargarVectorPF_ALU(const char* nombreArchivo, int* ce);
void mostrarCuentas_ALU(const char* nombreArchivo);

int main(int argc, char* argv[])
{
    if (argc != 4)
    {
        puts("Cantidad incorrecta de parámetros.");
        return 1;
    }

    generarArchivos(argv[1], argv[2]);

    puts("Cuentas antes de actualizar:");
    mostrarCuentas_ALU(argv[1]);

    FILE* cuentasDat = fopen(argv[1], "r+b");
    if (!cuentasDat)
        return 2;

    Fecha fechaProceso;
    int fechaOk = txtAFecha(argv[3], &fechaProceso);
    if (!fechaOk)
        return 3;

    PlazoFijo* plazosFijosVec = NULL;
    int ce = 0;

    plazosFijosVec = cargarVectorPF_ALU(argv[2], &ce);

    procesarPF_ALU(cuentasDat, plazosFijosVec, ce, &fechaProceso);

    fclose(cuentasDat);

    puts("\nCuentas después de actualizar:");
    mostrarCuentas_ALU(argv[1]);

    return 0;
}

void procesarPF_ALU(FILE* archivoCuentas, PlazoFijo* vectorPlazoFijo, int ce, Fecha* fechaProceso)
{
    fseek(archivoCuentas, 0, SEEK_SET);
    int cuentaActual = -1;
    Cuenta cuenta;

    while (fread(&cuenta, sizeof(Cuenta), 1, archivoCuentas) == 1)
    {
        if (cuenta.cuenta != cuentaActual)
        {
            cuentaActual = cuenta.cuenta;
        }

        for (int i = 0; i < ce; i++)
        {
            if (cuentaActual == vectorPlazoFijo[i].cuenta)
            {
                Fecha fechaVencimiento = sumarDiasAFecha(&vectorPlazoFijo[i].fechaConstitucion, vectorPlazoFijo[i].dias);

                if (cmpFechas(fechaProceso, &fechaVencimiento) >= 0)
                {
                    float intereses = vectorPlazoFijo[i].monto * (vectorPlazoFijo[i].dias / 365.0f) * (vectorPlazoFijo[i].interesAnual / 100.0f);
                    cuenta.saldo += vectorPlazoFijo[i].monto + intereses;
                    fseek(archivoCuentas, -sizeof(Cuenta), SEEK_CUR);
                    fwrite(&cuenta, sizeof(Cuenta), 1, archivoCuentas);
                    fseek(archivoCuentas, 0, SEEK_CUR);
                }
            }
        }
    }
}

PlazoFijo* cargarVectorPF_ALU(const char* nombreArchivo, int* ce)
{
    FILE* archivoText = fopen(nombreArchivo, "r");

    if (!archivoText)
    {
        printf("No se pudo abrir el archivo");
        return NULL;
    }

    char linea[256];
    PlazoFijo* vecPlazoFijo = NULL;

    while (fgets(linea, sizeof(linea), archivoText))
    {
        PlazoFijo plazoFijo;
        sscanf(linea, "%d|%d|%f|%f|%d/%d/%d|%d", &plazoFijo.nroPF, &plazoFijo.cuenta, &plazoFijo.monto, &plazoFijo.interesAnual, &plazoFijo.fechaConstitucion.dia, &plazoFijo.fechaConstitucion.mes, &plazoFijo.fechaConstitucion.anio, &plazoFijo.dias);
        (*ce)++;
        vecPlazoFijo = realloc(vecPlazoFijo, (*ce) * sizeof(PlazoFijo));
        vecPlazoFijo[(*ce) - 1] = plazoFijo;
    }

    fclose(archivoText);
    return vecPlazoFijo;
}

void mostrarCuentas_ALU(const char* nombreArchivo)
{
    FILE* archivo = fopen(nombreArchivo, "rb");

    if (!archivo)
    {
        printf("No se pudo abrir el archivo");
        return;
    }

    Cuenta cuenta;

    while (fread(&cuenta, sizeof(Cuenta), 1, archivo) == 1)
    {
        printf("CUENTA: %d - CLIENTE: %s - SALDO: $ %.2f\n", cuenta.cuenta, cuenta.cliente, cuenta.saldo);
    }

    fclose(archivo);
}

